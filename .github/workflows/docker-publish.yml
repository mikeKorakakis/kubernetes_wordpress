name: Docker Push Images

on:
  workflow_dispatch:
    inputs:
      push_api:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Push api image'
        # Default value if no value is explicitly provided
        default: 'no'
        # Input has to be provided for the workflow to run
        required: false
      push_client:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Push client image'
        # Default value if no value is explicitly provided
        default: 'no'
        # Input has to be provided for the workflow to run
        required: false
      push_identity:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Push identity image'
        # Default value if no value is explicitly provided
        default: 'no'
        # Input has to be provided for the workflow to run
        required: false
env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME_API: mikekorakakis/motobook:api
  IMAGE_NAME_CLIENT: mikekorakakis/motobook:client
  IMAGE_NAME_IDENTITY: mikekorakakis/motobook:identity    
  
jobs:
  
  push_api:   
    runs-on: ubuntu-latest
    if:  github.event.inputs.push_api=='yes' || github.event.inputs.push_api=='y' 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile-API --tag $IMAGE_NAME_API
                
      - name: Docker Login
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push image
        run: |
          docker push $IMAGE_NAME_API
          
  push_client:   
    runs-on: ubuntu-latest
    if:  github.event.inputs.push_client=='yes' || github.event.inputs.push_client=='y' 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile-client --tag $IMAGE_NAME_CLIENT
        # run: docker build . --file Dockerfile-client --build-arg NEXT_PUBLIC_AUTH0_DOMAIN=https://identity.moto-book.com --tag $IMAGE_NAME_CLIENT
                
      - name: Docker Login
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push image
        run: |
          docker push $IMAGE_NAME_CLIENT
          
  push_identity:   
    runs-on: ubuntu-latest
    if:  github.event.inputs.push_identity=='yes' || github.event.inputs.push_identity=='y' 
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile-Identity --tag $IMAGE_NAME_IDENTITY
                
      - name: Docker Login
        uses: docker/login-action@v1.8.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push image
        run: |
          docker push $IMAGE_NAME_IDENTITY
  
  run_remote:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: delete kubernetes folder
      uses: appleboy/ssh-action@master
      continue-on-error: true
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port:  22 
        script: |         
          rm -rf Kubernetes/

      
    - name: copy kubernetes folder via ssh password
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: 22
        source: "Kubernetes/*"
        target: "/home/${{ secrets.SERVER_USER }}"
      
    # - name: remote ssh delete old k8s manifests
    #   uses: appleboy/ssh-action@master
    #   continue-on-error: true
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USER }}
    #     password: ${{ secrets.SERVER_PASSWORD }}
    #     port:  22 
    #     script: |
    #       kubectl delete all --all -n motobook 
    #       kubectl delete ns motobook 
    #       kubectl delete -f Kubernetes/
    #       kubectl delete clusterissuer letsencrypt-staging letsencrypt-production -n istio-system
    #       kubectl delete certificate ingress-cert-staging ingress-cert-production -n istio-system
    #       kubectl delete secret ingress-cert-staging ingress-cert-production -n istio-system

    - name: remote ssh apply k8s manifests
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port:  22 
        script:  kubectl apply -f Kubernetes/namespace/motobook-ns.yaml &&
          kubectl get secret postgres-postgres-secret -n database -o yaml |  sed 's/database/motobook/' | kubectl apply  -f - &&
          kubectl apply -f Kubernetes/credentials/ && 
          kubectl apply -f Kubernetes/service_account && 
          kubectl apply -f Kubernetes/ && 
          kubectl apply -f Kubernetes/virtual_services/  &&
          kubectl apply -f Kubernetes/authentication_namespace/ &&
          kubectl apply -f Kubernetes/gateway/ &&
          kubectl apply -f Kubernetes/certificate/ &&
          kubectl apply -f Kubernetes/gateway/gateway_no_https.yaml &&
          sleep 5m &&
          kubectl apply -f Kubernetes/gateway/gateway.yaml

          # kubectl apply -f Kubernetes/destination_rule/ && 

#         key: ${{ secrets.SERVER_PRIVATE_KEY }}

    # - name: remote ssh start docker reverse proxy
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SERVER_HOST }}
    #     username: ${{ secrets.SERVER_USER }}
    #     password: ${{ secrets.SERVER_PASSWORD }}
    #     port:  22 
    #     script:  |
    #       cd Kubernetes/reverse_proxy
    #       docker-compose down && docker-compose build && docker-compose up -d
      